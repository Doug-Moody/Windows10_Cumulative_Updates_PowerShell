# Powershell script to patch Curveball and all previously patched vulnerabilities on Windows 10 1507-1909 
# This will identify the OS & Build then download the matching patches released up to Jan 14th 2020
# https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-0601
# Creating workspace in C:\Support for logs and files


function WorkArea {
    if (![System.IO.Directory]::Exists("C:\support\")) {
        [system.io.directory]::CreateDirectory("c:\Support")
    }

    if ([System.IO.Directory]::Exists("C:\support\Updates")) { 
        $FileTime = Get-Date -format 'MM.dd.yyyy'
        $Script:Rando = Get-Random -Maximum 100
        Rename-Item -Path "C:\support\Updates" -NewName "C:\support\Updates-$FileTime-$Rando"
    }

    if (![System.IO.Directory]::Exists("C:\support\Updates")) { 
        [system.io.directory]::CreateDirectory("c:\Support\Updates")
    }
}
WorkArea

function Logging {
    #Logging
    $VerbosePreference = 'Continue'
    $LogPath = "C:\Support\Updates"
    Get-ChildItem "$LogPath\*.txt" | Where-Object LastWriteTime -LT (Get-Date).AddDays(-15) | Remove-Item -Confirm:$false
    $LogPathName = Join-Path -Path $LogPath -ChildPath "$env:computername$($MyInvocation.MyCommand.Name)-$(Get-Date -Format 'MM.dd.yyyy').txt"
    Start-Transcript $LogPathName
} Logging

function CheckCVEandVERs {
    #Matt Graeber gave a us a oneliner command to check quickly in the log if there's any evidence of an event linked to CVE-2020-0601 (Application/EID 1-2)
    Get-WinEvent -FilterHashtable @{ LogName = 'Application'; Id = 1; ProviderName = 'Microsoft-Windows-Audit-CVE' } | Select-Object -Property * -ExcludeProperty MachineName, UserId | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append

    #Check CRYPT32.dll version - 10.0.18362.592 is what you want
    [System.Diagnostics.FileVersionInfo]::GetVersionInfo("C:\Windows\System32\crypt32.dll").FileVersionRaw.ToString()
    if ($env:username -ne "Administrator") { 
        [System.Console]::Clear() 
    }
}
CheckCVEandVERs

function Bitness {
    # Check Bitness of OS
    if ((Get-WmiObject win32_operatingsystem | Select-Object osarchitecture).osarchitecture -eq "64-bit") {
        #64 bit logic here
        Write-Output "64-bit OS Detected" | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append
        $Script:BIT = "64"
    }
    else {
        #32 bit logic here
        Write-Output "32-bit OS Detected" | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append
        $Script:BIT = "86"

    } 
}
Bitness

function SMTPMail {
# Email settings to be passed into further events
$Script:From = "sendgrid@YourEmail.com"
$Script:To = "you@youremail.com"
$Script:User = "apikey"
$Script:Cc = "$From"
$Script:Attachment = Get-ChildItem "C:\Support\Updates\*" -Include *.txt, *.evtx
#Subject line info populated below after variables are set
$Script:Body = "Logs attached related to system patching event"
$Script:SMTPServer = "smtp.sendgrid.net" 
$Script:SMTPPort = "587" #Or 587 for TLS; 465 for SSL https://sendgrid.com/docs/API_Reference/SMTP_API/integrating_with_the_smtp_api.html
$Script:Credentials = New-Object Management.Automation.PSCredential “$User”, (“YourSMTPpassword” | ConvertTo-SecureString -AsPlainText -Force)
# Below example line to utilize the above email settings
# Send-MailMessage -From $From -to $To <#-Cc $Cc#> -Subject $Subject1 -Body $Body -SmtpServer $SMTPServer -port $SMTPPort <#-UseSsl#> -Credential $Credentials -Attachments $Attachment –DeliveryNotificationOption OnSuccess
}
SMTPMail
function SetWinVersInfo {
    #Matching OS Build to a KB Identifier & Downloads
    switch ((Get-CimInstance Win32_OperatingSystem).BuildNumber) {
        ############################Windows 7 & 8 (Not support in this cumulative update)############################
        7600 { $Script:OS = "Not Supported" }
        7600 { $Script:KB = "Not Supported" }
        7600 { $Script:KB64 = "Not Supported" }
        7600 { $Script:KB86 = "Not Supported" }
        7601 { $Script:OS = "Not Supported" }    
        7601 { $Script:KB = "Not Supported" }
        7601 { $Script:KB64 = "Not Supported" }
        7601 { $Script:KB86 = "Not Supported" }
        9200 { $Script:OS = "Not Supported" }
        9200 { $Script:KB = "Not Supported" }
        9200 { $Script:KB64 = "Not Supported" }
        9200 { $Script:KB86 = "Not Supported" }
        9600 { $Script:OS = "Not Supported" }
        9600 { $Script:KB = "Not Supported" }
        9600 { $Script:KB64 = "Not Supported" }
        9600 { $Script:KB86 = "Not Supported" }
        ############################ Win 10 versions Below ############################
        ############################# 1507 ENTERPRISE and EDU ONLY############################
        10240 { $Script:OS = "W2K10v1507" }
        10240 { $Script:PRO = "Not Supported" }
        10240 { $Script:KB = "KB4534306" }
        10240 { $Script:SSU = "KB4523200" }
        10240 { $Script:SSU64 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/11/windows10.0-kb4523200-x64_8b9d9f7930dee5a052981864b86025ac832c2b21.msu" }
        10240 { $Script:SSU86 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/11/windows10.0-kb4523200-x86_a726a0b4e00446b2e6b775eb34b08bff735460eb.msu" }
        10240 { $Script:KB64 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/01/windows10.0-kb4534306-x64_fe79ab28516198be477c18e53390f802588bca6c.msu" }
        10240 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/01/windows10.0-kb4534306-x86_b79d87ac2c7692f2c152122c818baed709e4f11e.msu" }
        ############################# #1511 (Not Supported in this cumulative update EOL, update to a higher Windows version)
        10586 { $Script:OS = "W2k10v1511" }
        10586 { $Script:PRO = "Not Supported" }
        10586 { $Script:KB = "KB4052232" } #KB4093109 is the latest for Enterprise or Edu, Only patching for PRO
        10586 { $Script:SSU = "KB4015220" }
        10586 { $Script:SSU64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2018/03/windows10.0-kb4088779-x64_358fcb804a666b3463df5e876d7978e8de47ce83.msu" }
        10586 { $Script:SSU86 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2018/03/windows10.0-kb4088779-x86_6ee12b9c03a26803a21ffd08fa8ba1f52f29b501.msu" }
        10586 { $Script:KB64 = "http://download.windowsupdate.com/d/msdownload/update/software/updt/2017/11/windows10.0-kb4052232-x64_342abf55b673bd4d9ad963b9c4127b93d54bfee8.msu" }
        10586 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/updt/2017/11/windows10.0-kb4052232-x86_3263a3152a0591045e85bb829a573e68a2d349a4.msu" }
        ############################ 1607 ENTERPRISE and EDU ONLY############################
        14393 { $Script:OS = "W2K10v1607" }
        14393 { $Script:PRO = "Not Supported" }
        14393 { $Script:KB = "KB4534271" }
        14393 { $Script:SSU = "KB4520724" }
        14393 { $Script:SSU64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2019/11/windows10.0-kb4520724-x64_97604f0b532d6da814b4120fc43b2d9f6fd0b356.msu" }
        14393 { $Script:SSU86 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2019/11/windows10.0-kb4520724-x86_5909bf7b2440778b541741ea3eb0ba98758ced79.msu" }
        14393 { $Script:KB64 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/01/windows10.0-kb4534271-x64_a009e866038836e277b167c85c58bbf1e0cc5dc8.msu" }
        14393 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/01/windows10.0-kb4534271-x86_1401cdaf3781a6b032b558afd90fff6faa5569d3.msu" }
        ############################ 1703 ENTERPRISE and EDU ONLY############################
        15063 { $Script:OS = "W2K10v1703" }
        15063 { $Script:PRO = "Not Supported" }
        15063 { $Script:KB = "KB4534296" }
        15063 { $Script:SSU = "KB4523201" }
        15063 { $Script:SSU64 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/11/windows10.0-kb4523201-x64_17967a34fccff610ee3629c606171f9f9ba934a9.msu" }
        15063 { $Script:SSU86 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2019/11/windows10.0-kb4523201-x86_f2b82c0fef08d49780351eae563a9f04465892ae.msu" }
        15063 { $Script:KB64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/01/windows10.0-kb4534296-x64_be00b82daf47109410f688cd3776f2b1e3e091b1.msu" }
        15063 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/01/windows10.0-kb4534296-x86_f5cabb7aecb6000d39d0d82f84579a03ffa79f52.msu" }
        ############################ 1709 ENTERPRISE and EDU ONLY############################
        16299 { $Script:OS = "W2K10v1709" }
        16299 { $Script:PRO = "Not Supported" }
        16299 { $Script:KB = "KB4534276" }
        16299 { $Script:SSU = "KB4523202" }
        16299 { $Script:SSU64 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/11/windows10.0-kb4523202-x64_20fb82a53e33f151bfdb6c0810db2d5a5f24117e.msu" }
        16299 { $Script:SSU86 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2019/11/windows10.0-kb4523202-x86_ef4935d7d3e2d5389ceef51b1ab858acbc8c6028.msu" }
        16299 { $Script:KB64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/01/windows10.0-kb4534276-x64_0ef8f7279a888b2243bf02a1a4a8ab92fac5131f.msu" }
        16299 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/01/windows10.0-kb4534276-x86_accaa8ee3113a2b42a3da387c13ab59a59688bd3.msu" }
        ############################ 1803 ENTERPRISE and EDU ONLY############################
        17134 { $Script:OS = "W2K10v1803" }
        17134 { $Script:PRO = "Not Supported" }
        17134 { $Script:KB = "KB4534293" }
        17134 { $Script:SSU = "KB4523203" }
        17134 { $Script:SSU64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2019/11/windows10.0-kb4523203-x64_2aaebd36efec61f15df67913a416c34f8e29042c.msu" }
        17134 { $Script:SSU86 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2019/11/windows10.0-kb4523203-x86_46feffd715e086e036f08107630d2d5236edafab.msu" }
        17134 { $Script:KB64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/01/windows10.0-kb4534293-x64_af7ad26642b7c49788d70902f1918b9b234292cf.msu" }
        17134 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/01/windows10.0-kb4534293-x86_eea3d9658ebced3365ba55a6cc3de62a2a67ef93.msu" }
        ############################ 1809 ############################
        17763 { $Script:OS = "W2K10v1809" }
        17763 { $Script:KB = "KB4554354" }
        17763 { $Script:SSU = "KB4539571" }
        17763 { $Script:SSU64 = "http://download.windowsupdate.com/d/msdownload/update/software/secu/2020/03/windows10.0-kb4539571-x64_24d9621cc81434610770c25f5ba38082f8d12065.msu" }
        17763 { $Script:SSU86 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/03/windows10.0-kb4539571-x86_f63a97438b50173cd3362785fe102a6e5977956b.msu" }
        17763 { $Script:KB64 = "http://download.windowsupdate.com/c/msdownload/update/software/updt/2020/03/windows10.0-kb4554354-x64_656e139a25ad6577ddabc2213268e7ceb82af165.msu" }
        17763 { $Script:KB86 = "http://download.windowsupdate.com/c/msdownload/update/software/updt/2020/03/windows10.0-kb4554354-x86_2777d98ded121ce72a2e0c95ce274f60a7ad15e9.msu" }
        ############################ 1903 ############################
        18362 { $Script:OS = "W2K10v1903" }
        18362 { $Script:KB = "KB4554364" } 
        18362 { $Script:SSU = "KB4541338" } 
        18362 { $Script:SSU64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/03/windows10.0-kb4541338-x64_5db6cfc57a8bda4d13107ad24b3fe8fd790219cf.msu" } 
        18362 { $Script:SSU86 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/03/windows10.0-kb4541338-x86_8aba9b3c75caff7833e37dd5c0a26abcd88def01.msu" } 
        18362 { $Script:KB64 = "http://download.windowsupdate.com/c/msdownload/update/software/updt/2020/03/windows10.0-kb4554364-x64_0037f0861430f0d9a5cea807b46735c697a82d0c.msu" }
        18362 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/updt/2020/03/windows10.0-kb4554364-x86_f863a4d7845e249f3b0d087839b62da60262af62.msu" }
        ############################ 1909 ############################
        18363 { $Script:OS = "W2K10v1909" }
        18363 { $Script:KB = "KB4554364" } 
        18363 { $Script:SSU = "KB4541338" } 
        18363 { $Script:SSU64 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/03/windows10.0-kb4541338-x64_5db6cfc57a8bda4d13107ad24b3fe8fd790219cf.msu" } 
        18363 { $Script:SSU86 = "http://download.windowsupdate.com/c/msdownload/update/software/secu/2020/03/windows10.0-kb4541338-x86_8aba9b3c75caff7833e37dd5c0a26abcd88def01.msu" } 
        18363 { $Script:KB64 = "http://download.windowsupdate.com/c/msdownload/update/software/updt/2020/03/windows10.0-kb4554364-x64_0037f0861430f0d9a5cea807b46735c697a82d0c.msu" }
        18363 { $Script:KB86 = "http://download.windowsupdate.com/d/msdownload/update/software/updt/2020/03/windows10.0-kb4554364-x86_f863a4d7845e249f3b0d087839b62da60262af62.msu" }
        ############################ 2004 (Not Released) ############################
        19041 { $Script:OS = "Not Supported" }
        19041 { $Script:KB64 = "Not Supported" }
        19041 { $Script:KB86 = "Not Supported" }
        # PENDING: Server 2016 (Uses same as 1903 & 1909) Dont use on a server OS yet
        12345 { $Script:OS = "Not Supported" }
        12345 { $Script:KB = "Not Supported" } 
        12345 { $Script:KB64 = "Not Supported" }
        12345 { $Script:KB86 = "Not Supported" }
        default { $Script:OS = "Not Supported" }

    }
}
SetWinVersInfo


# Logging OS Version info
$Serial = Get-WMIobject Win32_Bios | Select-Object SerialNumber 
Write-Output "$env:computername - Windows $OS $WINVS $BIT $Serial" | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append
Get-HotFix | Select-Object HotFixID, InstalledBy, Description, InstalledOn | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append

function KBnSSUBitness {
    # Choose correct Bitness KB link, If Matching KB installed, end script and update by email
    switch ($BIT) {
        64 { $Script:KBL = "$KB64" }
        86 { $Script:KBL = "$KB86" }
        default { $Script:KBL = "Not Supported" }
    }


    # Choose correct Bitness SSU link, If Matching KB installed, continue to install KBs
    switch ($BIT) {
        64 { $Script:SSUL = "$SSU64" }
        86 { $Script:SSUL = "$SSU86" }
        default { $Script:SSUL = "Not Supported" }
    }
}KBnSSUBitness

#Text files for Subject line data variables to work
Write-output "UTS $env:computername $OS.$WINVS.x$BIT does not meet the OS requirements." | Out-file -filepath $Env:temp\subject1.txt
Write-output "UTS $env:computername $KB already installed on $OS.x$BIT" | Out-file -filepath $Env:temp\subject2.txt
Write-output "UTS $env:computername $KB was installed on $OS.x$BIT" | Out-file -filepath $Env:temp\subject3.txt
Write-output "UTS $env:computername $KB identified and exited. $OS.x$BIT" | Out-file -filepath $Env:temp\subject4.txt
$Script:Subject1 = (get-content $Env:temp\subject1.txt)
$Script:Subject2 = (get-content $Env:temp\subject2.txt)
$Script:Subject3 = (get-content $Env:temp\subject3.txt)
$Script:Subject4 = (get-content $Env:temp\subject4.txt)


# Exit if OS is not Win10 or if PRO (can remote $PRO if wanting to apply patches)  Can remove email section if not needed
If ($WINVS -ne 10 -Or $PRO -eq "Not Supported") {

    if ($env:username -ne "Administrator") { 
        [System.Console]::Clear() 
    }
    Write-Output "Your System is not affected and does not need the security update."

    #Start-Sleep -Second 3
    #Pending further email info
    
    Get-WmiObject -Class Win32_logicaldisk -Filter "DriveType = '3'" | 
    Select-Object -Property DeviceID, DriveType, VolumeName, 
    @{L = 'FreeSpaceGB'; E = { "{0:N2}" -f ($_.FreeSpace / 1GB) } },
    @{L = "Capacity"; E = { "{0:N2}" -f ($_.Size / 1GB) } }
    

    Stop-Transcript    
    Send-MailMessage -From $From -to $To <#-Cc $Cc#> -Subject $Subject1 -Body $Body -SmtpServer $SMTPServer -port $SMTPPort <#-UseSsl#> -Credential $Credentials -Attachments $Attachment –DeliveryNotificationOption OnSuccess | Out-Null

        
    Write-Output "You may exit after 5 seconds to allow log completion..."
    #Start-Sleep -Second 5
    
    #if ($env:username -ne "Administrator") { 
    #    $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
    #    Exit
    #}
    #Exit
    Break
}


function PatchSituation {
    #$Patch = Get-Hotfix -id "$KB"
    $Patch = Get-Hotfix -id "$KB"
    if ($null -ne $Patch) {
        #System replied with info meaning the patch is installed
        if ($env:username -ne "Administrator") { 
            [System.Console]::Clear() 
        }
        Write-Output "System already has the Cumulative Update"
        Stop-Transcript
        #Start-Sleep -Second 3
    
        Send-MailMessage -From $From -to $To <#-Cc $Cc#> -Subject $Subject4 -Body $Body -SmtpServer $SMTPServer -port $SMTPPort <#-UseSsl#> -Credential $Credentials -Attachments $Attachment –DeliveryNotificationOption OnSuccess | Out-Null
   
        Write-Output "Press any key to exit..."
        #Start-Sleep -Second 5
        #[console]::beep(2000, 100)
        
        if ($env:username -ne "Administrator") { 
            #$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
            break
        } 
        Break
        #exit 
    }

    If ($KB -eq "Not Supported" -OR $OS -eq "Not Supported") {
    
        #If the KB doesnt match or OS not supported bail out here and send alert email
        Write-Output "OS detected and is not supported by this. Must update in order to patch" | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append
        if ($env:username -ne "Administrator") { 
            [System.Console]::Clear() 
        }
        Write-Output "No matching KBs or Servicing Stack Updates. Finishing updates & checks..."
        Stop-Transcript
        #Start-Sleep -Second 3

    
        Send-MailMessage -From $From -to $To <#-Cc $Cc#> -Subject $Subject1 -Body $Body -SmtpServer $SMTPServer -port $SMTPPort <#-UseSsl#> -Credential $Credentials -Attachments $Attachment –DeliveryNotificationOption OnSuccess | Out-Null
    
    
        Start-Sleep -Second 5
        #if ($env:username -ne "Administrator") { 
        #   $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
        #}
        Break
        #exit
    } 
}
PatchSituation

function FATupdate {
    #Alert user that system is currently updating if a large update only
    switch ((Get-CimInstance Win32_OperatingSystem).BuildNumber) {
        ############################# 1507 ############################
        10240 { $Script:BIG = "True" }
        #1511 (Not Supported in this cumulative update EOL, update to a higher Windows version)
        10586 { $Script:BIG = "True" }
        ############################ 1607 ############################
        14393 { $Script:BIG = "True" }
        ############################ 1703 ############################
        15063 { $Script:BIG = "True" }
        ############################ 1709 ############################
        16299 { $Script:BIG = "True" }
        ############################ 1803 ############################
        17134 { $Script:BIG = "True" }
        ############################ 1809 ############################
        17763 { $Script:BIG = "False" }
        ############################ 1903 ############################F
        18362 { $Script:BIG = "False" }
        ############################ 1909 ############################
        18363 { $Script:BIG = "False" }
        ############################ 2004 (Not Released) ############################
        19041 { $Script:BIG = "False" }
        # PENDING: Server 2016 (Uses same as 1903 & 1909) Dont use on a server OS yet
        12345 { $Script:BIG = "False" }
        default { $Script:BIG = "False" }
    }

    if ($BIG -eq "True") {
        if ($env:username -ne "Administrator") { 
            [System.Console]::Clear()
            Write-Output "Hello , your computer is downloading a large security patch and will need to remain powered on until complete. You can continue using the system but prepare by saving data as there will be a need to reboot later. If you must shutdown and transport the system now, you may tell the PC to SLEEP and it will continue progress once powered on again" 
        }
        Write-Output "Hello , your computer is downloading a large security patch and will need to remain powered on until complete. You can continue using the system but prepare by saving data as there will be a need to reboot later. If you must shutdown and transport the system now, you may tell the PC to SLEEP and it will continue progress once powered on again"
    }
    else {
        if ($env:username -ne "Administrator") { 
            [System.Console]::Clear() 
        }
        Write-Output "Your system is patching and should be completed shortly. Feel free to continue using the system as usual."
        Write-Output "The menu should appear once the updates are complete. Reboot once finished."
    }
}
FATupdate

function Get-MSU {
    <#Download the matching Cumulative Patches for the detected Windows 10 OS #>
    if (Test-Path "C:\Support\Updates" -Pathtype Container) {
        Set-Variable -Name "URL" -Value "$KBL"
        Set-Variable -Name "Filename1" -Value "C:\Support\Updates\2-CLU.$KB.x$BIT.msu"
          
        function Get-FileFromURL {
            [CmdletBinding()]
            param(
                [Parameter(Mandatory, Position = 0)]
                [System.Uri]$URL,
                [Parameter(Mandatory, Position = 1)]
                [string]$Filename1
            )
    
            process {
                try {
                    $request = [System.Net.HttpWebRequest]::Create($URL)
                    $request.set_Timeout(5000) # 5 second timeout
                    $response = $request.GetResponse()
                    $total_bytes = $response.ContentLength
                    $response_stream = $response.GetResponseStream()
    
                    try {
                        # 256KB works better on my machine for 1GB and 10GB files
                        # See https://www.microsoft.com/en-us/research/wp-content/uploads/2004/12/tr-2004-136.pdf
                        # Cf. https://stackoverflow.com/a/3034155/10504393
                        $buffer = New-Object -TypeName byte[] -ArgumentList 256KB
                        $target_stream = [System.IO.File]::Create($Filename1)
    
                        $timer = New-Object -TypeName timers.timer
                        $timer.Interval = 1000 # Update progress every second
                        $timer_event = Register-ObjectEvent -InputObject $timer -EventName Elapsed -Action {
                            $Script:update_progress = $true
                        }
                        $timer.Start()
    
                        do {
                            $count = $response_stream.Read($buffer, 0, $buffer.length)
                            $target_stream.Write($buffer, 0, $count)
                            $downloaded_bytes = $downloaded_bytes + $count
    
                            if ($Script:update_progress) {
                                $percent = $downloaded_bytes / $total_bytes
                                $status = @{
                                    completed  = "{0,6:p2} Completed" -f $percent
                                    downloaded = "{0:n0} MB of {1:n0} MB" -f ($downloaded_bytes / 1MB), ($total_bytes / 1MB)
                                    speed      = "{0,7:n0} KB/s" -f (($downloaded_bytes - $prev_downloaded_bytes) / 1KB)
                                    eta        = "eta {0:hh\:mm\:ss}" -f (New-TimeSpan -Seconds (($total_bytes - $downloaded_bytes) / ($downloaded_bytes - $prev_downloaded_bytes)))
                                }
                                $progress_args = @{
                                    Activity        = "Downloading $URL"
                                    Status          = "$($status.completed) ($($status.downloaded)) $($status.speed) $($status.eta)"
                                    PercentComplete = $percent * 100
                                }
                                Write-Progress @progress_args
    
                                $prev_downloaded_bytes = $downloaded_bytes
                                $Script:update_progress = $false
                            }
                        } while ($count -gt 0)
                    }
                    finally {
                        if ($timer) { $timer.Stop() }
                        if ($timer_event) { Unregister-Event -SubscriptionId $timer_event.Id }
                        if ($target_stream) { $target_stream.Dispose() }
                        # If file exists and $count is not zero or $null, than script was interrupted by user
                        if ((Test-Path $Filename1) -and $count) { Remove-Item -Path $Filename1 }
                    }
                }
                finally {
                    if ($response) { $response.Dispose() }
                    if ($response_stream) { $response_stream.Dispose() }
                }
            }
        }
        Get-FileFromUrl $URL $Filename1

    }

    #If there is an SSU update, download second so it is run first below.
    $Script:ServiceStack = Get-Hotfix -id "$SSU"
    if ($null -ne $ServiceStack) {
        #System replied with info meaning the patch is installed
        <#if ($env:username -ne "Administrator") { 
        [System.Console]::Clear() 
    }#>
        Write-Output "Servicing Stack is already up to date. Pending further actions..."
        #Start-Sleep -Second 3
        Write-Output "Servicing Stack $SSU was detected on $env:computername" | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append
    }
    else {
        #Create Variable that is Script wide for the download link
        $Script:LINK2 = "$SSUL"
        <#Download the matching Servicing Stack for the detected Windows 10 OS #>

        if ($env:username -ne "Administrator") { 
            [System.Console]::Clear() 
        }
        Write-Output "Downloading Service Stack Update to patch system to newer version..."
        Set-Variable -Name "URL2" -Value "$LINK2"
        Set-Variable -Name "Filename2" -Value "C:\Support\Updates\1-SSU.$SSU.x$BIT.msu" 
        
        function Get-FileFromURL {
            [CmdletBinding()]
            param(
                [Parameter(Mandatory, Position = 0)]
                [System.Uri]$URL,
                [Parameter(Mandatory, Position = 1)]
                [string]$Filename1
            )
    
            process {
                try {
                    $request = [System.Net.HttpWebRequest]::Create($URL)
                    $request.set_Timeout(5000) # 5 second timeout
                    $response = $request.GetResponse()
                    $total_bytes = $response.ContentLength
                    $response_stream = $response.GetResponseStream()
    
                    try {
                        # 256KB works better on my machine for 1GB and 10GB files
                        # See https://www.microsoft.com/en-us/research/wp-content/uploads/2004/12/tr-2004-136.pdf
                        # Cf. https://stackoverflow.com/a/3034155/10504393
                        $buffer = New-Object -TypeName byte[] -ArgumentList 256KB
                        $target_stream = [System.IO.File]::Create($Filename1)
    
                        $timer = New-Object -TypeName timers.timer
                        $timer.Interval = 1000 # Update progress every second
                        $timer_event = Register-ObjectEvent -InputObject $timer -EventName Elapsed -Action {
                            $Script:update_progress = $true
                        }
                        $timer.Start()
    
                        do {
                            $count = $response_stream.Read($buffer, 0, $buffer.length)
                            $target_stream.Write($buffer, 0, $count)
                            $downloaded_bytes = $downloaded_bytes + $count
    
                            if ($Script:update_progress) {
                                $percent = $downloaded_bytes / $total_bytes
                                $status = @{
                                    completed  = "{0,6:p2} Completed" -f $percent
                                    downloaded = "{0:n0} MB of {1:n0} MB" -f ($downloaded_bytes / 1MB), ($total_bytes / 1MB)
                                    speed      = "{0,7:n0} KB/s" -f (($downloaded_bytes - $prev_downloaded_bytes) / 1KB)
                                    eta        = "eta {0:hh\:mm\:ss}" -f (New-TimeSpan -Seconds (($total_bytes - $downloaded_bytes) / ($downloaded_bytes - $prev_downloaded_bytes)))
                                }
                                $progress_args = @{
                                    Activity        = "Downloading $URL"
                                    Status          = "$($status.completed) ($($status.downloaded)) $($status.speed) $($status.eta)"
                                    PercentComplete = $percent * 100
                                }
                                Write-Progress @progress_args
    
                                $prev_downloaded_bytes = $downloaded_bytes
                                $Script:update_progress = $false
                            }
                        } while ($count -gt 0)
                    }
                    finally {
                        if ($timer) { $timer.Stop() }
                        if ($timer_event) { Unregister-Event -SubscriptionId $timer_event.Id }
                        if ($target_stream) { $target_stream.Dispose() }
                        # If file exists and $count is not zero or $null, than script was interrupted by user
                        if ((Test-Path $Filename1) -and $count) { Remove-Item -Path $Filename1 }
                    }
                }
                finally {
                    if ($response) { $response.Dispose() }
                    if ($response_stream) { $response_stream.Dispose() }
                }
            }
        }
    
        Get-FileFromUrl $URL2 $Filename2

    }
}
Get-MSU


Function InstallMSUs {
    <#  This will install multiple Microsoft Standalone Updates from the specified location silently and without rebooting after each update.
You have the option of rebooting after all of the updates have been installed.  Two logs are crated, an output log from WUSA that has
to be read with Event Viewer (.evtx extension) and a transcript log to give you an idea of what's going on (.log extension).
#>

    $Location = "C:\Support\Updates"
    $Script:FileTime = Get-Date -format 'MM.dd.yyyy'
    $Updates = (Get-ChildItem $Location | Where-Object { $_.Extension -eq '.msu' } | Sort-Object -Property Name )
    $Qty = $Updates.count

    if (!(Test-Path $env:systemroot\SysWOW64\wusa.exe)) {
        $Wus = "$env:systemroot\System32\wusa.exe"
    }
    else {
        $Wus = "$env:systemroot\SysWOW64\wusa.exe"
    }

    if (Test-Path C:\Support\Updates\Wusa.evtx) {
        Rename-Item C:\Support\Updates\Wusa.evtx C:\Support\Updates\$env:computername.Wusa.$FileTime.evtx
    }

    foreach ($Update in $Updates) {
        if ($env:username -ne "Administrator") { 
            [System.Console]::Clear() 
        }
        Write-Information "Starting Update $Qty - $Update , Please wait....."
        Start-Process -FilePath $Wus -ArgumentList ($Update.FullName, '/quiet', '/norestart', "/log:C:\Support\Updates\Wusa.txt") -Wait
        Write-Information "Finished Update $Qty"
        $Script:Rando = Get-Random -Maximum 100
        if (Test-Path C:\Support\Updates\Wusa.txt) {
            Rename-Item C:\Support\Updates\Wusa.txt C:\Support\Updates\$Rando.$env:computername.Wusa.$FileTime.evtx
        }

        Write-Information '-------------------------------------------------------------------------------------------'

        $Qty = --$Qty

        if ($Qty -eq 0) {
            Write-Output "Post Patching Log Update" | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append
            <#$ProcessList = @(
            "TiWorker" #or whatever you want to monitor
        )
        Do {  
            $ProcessesFound = Get-Process | Where-Object { $ProcessList -contains $_.Name } | Select-Object -ExpandProperty Name
            If ($ProcessesFound) {
                Write-Output "Still running: $($ProcessesFound), awaiting 30 seconds to verify completion (Email ITSupport if this takes an hour or more. Sleep (not shutdown) the PC if needing to transport)..."
                Start-Sleep 30
            }
        } Until (!$ProcessesFound)#>

        }
    }
    #If user is not administrator, clear console
        
    if ($env:username -ne "Administrator") { 
        [System.Console]::Clear() 
    }
        
    Write-Output "Updates completed, pending last steps..."
       
    #List contents of Updates
    $path = "C:\Support\Updates"
    Get-ChildItem $path -Recurse | ForEach-Object { 
        $_.fullname -replace [regex]::escape($path), (split-path $path -leaf)
    }
        
    Get-HotFix | Select-Object HotFixID, InstalledBy, Description, InstalledOn | Out-file -Filepath c:\support\Updates\$env:computername.hotfixes.txt -Append
    Stop-Transcript
        
    Send-MailMessage -From $From -to $To <#-Cc $Cc#> -Subject $Subject3 -Body $Body -SmtpServer $SMTPServer -port $SMTPPort <#-UseSsl#> -Credential $Credentials -Attachments $Attachment –DeliveryNotificationOption OnSuccess | Out-Null
        
        
    if ($env:username -ne "Administrator") {
        [System.Console]::Clear()
        Write-Output "Updates completed. You may exit this screen or press any key to exit."
        #$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
    } 
}
InstallMSUs
#Exit
